var CONFIG = require('config'),
    Db = require('mongodb').Db,
    Connection = require('../node_modules/mongodb').Connection,
    Server = require('mongodb').Server,
    ObjectID = require('mongodb').ObjectID,
    mongo = require('mongodb'),
    ntwitter = require('ntwitter');


function TweetArchiver(tag) {
  console.log("TweetArc instanciated");
  var that = this;
  var host = process.env['MONGO_NODE_DRIVER_HOST'] != null ? process.env['MONGO_NODE_DRIVER_HOST'] : 'localhost';
  var port = process.env['MONGO_NODE_DRIVER_PORT'] != null ? process.env['MONGO_NODE_DRIVER_PORT'] : Connection.DEFAULT_PORT;
  
  var db = new Db(CONFIG.DATABASE_NAME, new Server(host, port, {}), {native_parser:true}).open(function(error, client) {
    if (error) throw error;    
    that.tweets = new mongo.Collection(client, CONFIG.COLLECTION_NAME);
    that.tweets.ensureIndex([["id", 1],["tags", 1], ["id", -1]], {"unique": true}, function(error, indexName) { });
  });

  this.tag = tag;
  this.tweets_found = 0;
}

TweetArchiver.prototype.update = function() {
  var that = this;
  console.log("Starting Tweeter search for " + this.tag + "...");
  this.save_tweets_for(this.tag, function(error, result) {
    console.log(that.tweets_found + " tweets saved");
  });
}
TweetArchiver.prototype.save_tweets_for = function(term) {
  var that = this;
  console.log("Search twetter...");
  var twit = new ntwitter({
    consumer_key: CONFIG.TWITTER.CONSUMER_KEY,
    consumer_secret: CONFIG.TWITTER.CONSUMER_SECRET,
    access_token_key: CONFIG.TWITTER.ACCESS_TOKEN_KEY,
    access_token_secret: CONFIG.TWITTER.ACCESS_TOKEN_SECRET
  });

  twit.search(term,{}, function(err, data) {
    data.results.forEach(function(myTwit) {
      //console.log(myTwit);
      var tweet_with_tag = myTwit;
      tweet_with_tag["tags"] = term;
      //console.log(tweet_with_tag);
      that.tweets_found += 1;
      that.tweets.save(tweet_with_tag);
    });
  });
}
TweetArchiver.findCollectionTwitsBySelector = function(collection, selector, callback) {
  var host = process.env['MONGO_NODE_DRIVER_HOST'] != null ? process.env['MONGO_NODE_DRIVER_HOST'] : 'localhost';
  var port = process.env['MONGO_NODE_DRIVER_PORT'] != null ? process.env['MONGO_NODE_DRIVER_PORT'] : Connection.DEFAULT_PORT;
  
  var db = new Db(CONFIG.DATABASE_NAME, new Server(host, port, {}), {native_parser:true}).open(function(error, client) {
    if (error) throw error;    
    var tweets = new mongo.Collection(client, collection);
    
    tweets.find(selector).toArray(function(err, tweets){
      callback(tweets);
    });

  });

}
module.exports = TweetArchiver;